import sqlite3
from db.database import get_connection
from ui.curses_utils import cinput, cprint


# –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å JOIN –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–¥–µ–ª—ã
def fetch_workers(department_id=None, position_id=None):
    conn = get_connection()
    try:
        cur = conn.cursor()
        query = """
        SELECT
            W.id,
            W.fio,
            P.name AS position_name,
            D.name AS department_name,
            W.phone,
            W.email
        FROM Workers AS W
        LEFT JOIN Positions AS P ON W.position_id = P.id
        LEFT JOIN Departments AS D ON W.department_id = D.id
        WHERE 1=1
        """
        params = []
        if department_id:
            query += " AND D.id = ?"
            params.append(department_id)
        if position_id:
            query += " AND P.id = ?"
            params.append(position_id)

        query += " ORDER BY W.fio ASC"
        cur.execute(query, params)
        return cur.fetchall()
    finally:
        conn.close()


# –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–¥–µ–ª—ã
def fetch_departments():
    conn = get_connection()
    try:
        cur = conn.cursor()
        cur.execute("SELECT id, name FROM Departments ORDER BY name")
        return cur.fetchall()
    finally:
        conn.close()


# –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
def fetch_positions():
    conn = get_connection()
    try:
        cur = conn.cursor()
        cur.execute("SELECT id, name FROM Positions ORDER BY name")
        return cur.fetchall()
    finally:
        conn.close()


# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
def print_workers_table(stdscr, workers):
    if not workers:
        cprint(stdscr, "‚ö†Ô∏è  –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    cprint(stdscr, "\nüìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n")
    cprint(stdscr, f"{'ID':<4} {'–§–ò–û':<30} {'–î–æ–ª–∂–Ω–æ—Å—Ç—å':<20} {'–û—Ç–¥–µ–ª':<20} {'–¢–µ–ª–µ—Ñ–æ–Ω':<15} {'Email'}")
    cprint(stdscr, "-" * 100)

    for row in workers:
        cprint(stdscr, f"{row['id']:<4} {row['fio']:<30.30} {row['position_name']:<20.20} "
              f"{row['department_name']:<20.20} {row['phone'] or '-':<15} {row['email'] or '-'}")
    cprint(stdscr, "-" * 100)
    cprint(stdscr, f"–í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(workers)}")


# –í—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞/–¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
def choose_filter(stdscr):
    cprint(stdscr, "\n–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞:")
    cprint(stdscr, "  1. –í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
    cprint(stdscr, "  2. –ü–æ –æ—Ç–¥–µ–ª—É")
    cprint(stdscr, "  3. –ü–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")
    cprint(stdscr, "  0. –û—Ç–º–µ–Ω–∞")

    while True:
        choice = cinput(stdscr, 5, 4, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç: ").strip()
        if choice == "0":
            return None, None
        if choice == "1":
            return None, None
        if choice == "2":
            return choose_department_filter(), None
        if choice == "3":
            return None, choose_position_filter()
        cprint(stdscr, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def choose_department_filter(stdscr):
    deps = fetch_departments()
    if not deps:
        cprint(stdscr, "‚ö†Ô∏è  –í –±–∞–∑–µ –Ω–µ—Ç –æ—Ç–¥–µ–ª–æ–≤.")
        return None

    cprint(stdscr, "\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª:")
    for i, d in enumerate(deps, start=1):
        cprint(stdscr, f"  {i}. {d['name']}")
    while True:
        c = cinput(stdscr, 5, 4, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã: ").strip()
        if c == "0":
            return None
        if c.isdigit() and 1 <= int(c) <= len(deps):
            return deps[int(c) - 1]['id']
        cprint(stdscr, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")


def choose_position_filter(stdscr):
    pos = fetch_positions()
    if not pos:
        cprint(stdscr, "‚ö†Ô∏è  –í –±–∞–∑–µ –Ω–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π.")
        return None

    cprint(stdscr, "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
    for i, p in enumerate(pos, start=1):
        cprint(stdscr, f"  {i}. {p['name']}")
    while True:
        c = cinput(stdscr, 5, 4, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã: ").strip()
        if c == "0":
            return None
        if c.isdigit() and 1 <= int(c) <= len(pos):
            return pos[int(c) - 1]['id']
        cprint(stdscr, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")


# –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ ‚Äî –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
def list_workers_flow(stdscr):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –æ—Ç–¥–µ–ª—É –∏–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.
    """
    cprint(stdscr, "\n=== –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ ===")
    dep_id, pos_id = choose_filter()
    workers = fetch_workers(department_id=dep_id, position_id=pos_id)
    print_workers_table(workers)
    cinput(stdscr, 5, 4, "\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")


# –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    list_workers_flow()
