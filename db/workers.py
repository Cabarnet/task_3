from db.database import get_connection

# –î–æ–±–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
def add_worker(fio: str, position: str, salary: float, department_id: int, phone: str = None, email: str = None):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É Workers.
    """
    conn = get_connection()
    cur = conn.cursor()
    try:
        cur.execute(
            """
            INSERT INTO Workers (fio, position, salary, department_id, phone, email)
            VALUES (?, ?, ?, ?, ?, ?)
            """,
            (fio, position, salary, department_id, phone, email),
        )
        conn.commit()
        print(f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ '{fio}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
    finally:
        conn.close()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
def list_workers():
    """
    –í—ã–≤–æ–¥–∏—Ç –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –æ—Ç–¥–µ–ª–∞ –∏ –æ–∫–ª–∞–¥–∞.
    """
    conn = get_connection()
    cur = conn.cursor()
    cur.execute(
        """
        SELECT w.id, w.fio, w.position, w.salary, d.name AS department
        FROM Workers w
        LEFT JOIN Departments d ON w.department_id = d.id
        ORDER BY w.fio
        """
    )
    workers = cur.fetchall()
    conn.close()

    if not workers:
        print("\n–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        return

    print("\nüë• –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:")
    for idx, w in enumerate(workers, start=1):
        print(f"  {idx}. {w['fio']} | {w['position']} | {w['salary']} —Ä—É–± | –û—Ç–¥–µ–ª: {w['department'] or '‚Äî'}")


# –ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
def find_worker_by_name(fio: str):
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –§–ò–û (–ø–æ–∏—Å–∫ —á–∞—Å—Ç–∏—á–Ω—ã–π, —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π).
    """
    conn = get_connection()
    cur = conn.cursor()
    cur.execute(
        """
        SELECT w.id, w.fio, w.position, w.salary, d.name AS department
        FROM Workers w
        LEFT JOIN Departments d ON w.department_id = d.id
        WHERE LOWER(w.fio) LIKE ?
        """,
        (f"%{fio.lower()}%",),
    )
    results = cur.fetchall()
    conn.close()

    if not results:
        print(f"\n‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å –∏–º–µ–Ω–µ–º '{fio}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(results)}")
    for idx, w in enumerate(results, start=1):
        print(f"  {idx}. {w['fio']} | {w['position']} | {w['salary']} —Ä—É–± | –û—Ç–¥–µ–ª: {w['department'] or '‚Äî'}")


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
def update_worker(worker_id: int, **kwargs):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (fio, position, salary, phone, email, department_id).
    –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞:
        update_worker(3, salary=95000, position="Team Lead")
    """
    if not kwargs:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return

    conn = get_connection()
    cur = conn.cursor()

    fields = ", ".join([f"{k} = ?" for k in kwargs.keys()])
    values = list(kwargs.values()) + [worker_id]

    try:
        cur.execute(f"UPDATE Workers SET {fields} WHERE id = ?", values)
        conn.commit()
        print(f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID={worker_id} –æ–±–Ω–æ–≤–ª—ë–Ω.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
    finally:
        conn.close()


# –£–¥–∞–ª–µ–Ω–∏–µ
def delete_worker(worker_id: int):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ ID.
    """
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("DELETE FROM Workers WHERE id = ?", (worker_id,))
    conn.commit()
    conn.close()
    print(f"üóëÔ∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID={worker_id} —É–¥–∞–ª—ë–Ω (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª).")