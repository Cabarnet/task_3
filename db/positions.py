from db.database import get_connection


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
def add_position(name: str):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É Positions.
    """
    conn = get_connection()
    cur = conn.cursor()
    try:
        cur.execute("INSERT INTO Positions (name) VALUES (?)", (name,))
        conn.commit()
        print(f"‚úÖ –î–æ–ª–∂–Ω–æ—Å—Ç—å '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: {e}")
    finally:
        conn.close()


# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π
def list_positions():
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ –∫–∞–∂–¥–æ–π.
    """
    conn = get_connection()
    cur = conn.cursor()
    cur.execute(
        """
        SELECT p.id, p.name, COUNT(w.id) AS workers_count
        FROM Positions p
        LEFT JOIN Workers w ON w.position_id = p.id
        GROUP BY p.id, p.name
        ORDER BY p.name
        """
    )
    positions = cur.fetchall()
    conn.close()

    if not positions:
        print("\nüìã –°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –ø—É—Å—Ç.")
        return

    print("\nüìã –°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π:")
    for pos in positions:
        print(f"  {pos['id']}. {pos['name']} ({pos['workers_count']} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)")


# –ü–æ–∏—Å–∫ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
def find_position(name: str):
    """
    –ò—â–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞).
    """
    conn = get_connection()
    cur = conn.cursor()
    cur.execute(
        """
        SELECT p.id, p.name, COUNT(w.id) AS workers_count
        FROM Positions p
        LEFT JOIN Workers w ON w.position_id = p.id
        WHERE LOWER(p.name) LIKE ?
        GROUP BY p.id, p.name
        """,
        (f"%{name.lower()}%",),
    )
    results = cur.fetchall()
    conn.close()

    if not results:
        print(f"\n‚ùå –î–æ–ª–∂–Ω–æ—Å—Ç–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ '{name}', –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(results)}")
    for pos in results:
        print(f"  {pos['id']}. {pos['name']} ({pos['workers_count']} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)")


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def update_position(pos_id: int, **kwargs):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.
    –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞:
        update_position(3, name="–ò–Ω–∂–µ–Ω–µ—Ä-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç")
    """
    if not kwargs:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return

    conn = get_connection()
    cur = conn.cursor()
    fields = ", ".join([f"{k} = ?" for k in kwargs.keys()])
    values = list(kwargs.values()) + [pos_id]

    try:
        cur.execute(f"UPDATE Positions SET {fields} WHERE id = ?", values)
        conn.commit()
        print(f"‚úÖ –î–æ–ª–∂–Ω–æ—Å—Ç—å —Å ID={pos_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: {e}")
    finally:
        conn.close()


# –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
def delete_position(pos_id: int):
    """
    –£–¥–∞–ª—è–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ø–æ ID (–ø—Ä–∏ —ç—Ç–æ–º —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω—É–∂–Ω–æ –æ–±–Ω—É–ª–∏—Ç—å position_id).
    """
    conn = get_connection()
    cur = conn.cursor()
    try:
        cur.execute("UPDATE Workers SET position_id = NULL WHERE position_id = ?", (pos_id,))
        cur.execute("DELETE FROM Positions WHERE id = ?", (pos_id,))
        conn.commit()
        print(f"üóëÔ∏è –î–æ–ª–∂–Ω–æ—Å—Ç—å —Å ID={pos_id} —É–¥–∞–ª–µ–Ω–∞.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏: {e}")
    finally:
        conn.close()
